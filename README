Please note that this README has not been peer-reviewed. If you find any flaws
in it or in the library, please e-mail the author at clinew@onid.orst.edu.

Introduction:

libflub is a simple way to handle errors in C code. The structure allows the
user to easily specify and return an error message, backtrace, and error code
at any given point in the program.

Rather than having each function return an integer indicating success or
failure, the function will simply return a pointer to a flub structure. If the
pointer is non-null, then an error occurred and the stucture can be printed,
or it can be passed again until a function decides to handle it be printing
and/or freeing the flub.

Example:

A function hello() can return an error with:

	#define BADNESS 0xDEADBEEF
	static struct flub flub;
	...
	return flub_toss(&flub, "Badness ensued!", BADNESS);
	...

The calling function, world(), can then return the error back to its caller with:

	struct flub* flub;
	...
	flub = hello();
	if (flub) { // Represents failure.
		return flub;
	}
	return NULL; // Represents success.
	...

Then world()'s calling function, main(), can print the error and free the
resources with:

	struct flub* flub;
	...
	flub = world();
	if (flub) {
		flub_print(flub);
		flub_grab(flub);
	}
	...

flub_print() will then print the backtrace, which may look something like:

	*** FLUB ***
	Error Code: 3735928559
	Message: Badness ensued!
	Backtrace: 

	./main(hello+0x3d) [0xb773dce9]
	./main(world+0x16) [0xb773dd16]
	./main(main+0x42) [0xb773dd7e]
	/lib/libc.so.6(__libc_start_main+0xe6) [0xb759a566]
	./main(+0xbc1) [0xb773dbc1]

	*****************

This allows one to easily find what caused the error. Of course, all the extra
space for statically-allocated strings is likely not welcome in a finished 
product. Therefore, one can define FLUB_COMPACT before including flub.h (the
best way to do this is in a typedef.h file that all other files include). In
this case, the struct flub pointer will actually contain the value of the error
code in its pointer and won't actually point to a flub structure. The functions
will handle all of this transparently

For example, suppose the previous code had the following segment:

	...
	#define FLUB_COMPACT
	#include <flub.h>
	...

Then the output of flub_catch() would be:

	Error Code: 3735928559.

and the string "An error occurred!" would not be included in the program
output. (-O2 seems to work on gcc, but the strings are included when no
optimization is specified).

Alternatively, if one simply wants to extract the error code from the flub,
they can use the flub_yoink() function.

	unsigned long error_code;
	...
	error_code = flub_yoink(flub);
	...

The flub_yoink() function will know whether to cast the pointer back into
an unsigned long or whether to dereference the structure and return the
appropriate member.

Caveats:

Make sure to consistently define FLUB_COMPACT before including flub.h.
Otherwise, some functions may try to dereference the pointer when the pointer
is actually an error code. This will most likely cause a segmentation fault.
The best way to do this is to have a typedef.h file that all other code files
include that will include flub.h and the proper define, or lack thereof.

The value of zero is -never- a valid error code. This is because if
FLUB_COMPACT is enabled, the value of zero will be assigned to the pointer.
In this case, all checks for flub in the form of "if (flub)" will return false,
and the program will assume no error occurred. 

flub_toss() allocates memory via calling the backtrace() and
backtrace_symbols() system calls and via allocating memory for the error
message. This memory must be freed by subsequently calling flub_grab().

Getting the symbol (function name) included in the backtrace is apparently
tricky business. Compiling with the "-rdynamic" option seems to ensure the
symbol name, though. Of course, that won't help for functions with internal
linkage (static functions).

TODOs:

The man-page for backtrace_symbols() says that "(The strings pointed to by the
array of pointers need not and should not be freed.)", but how is that even
possible?! Will this break on multi-threaded applications? I don't know...
